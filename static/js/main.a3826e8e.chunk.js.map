{"version":3,"sources":["components/ToDo.jsx","App.js","index.js"],"names":["ToDo","useState","inputData","setInputData","localStorage","getItem","JSON","parse","items","setItems","toggleSubmit","setToggleSubmit","isEditItem","setIsEditItem","addItem","map","elem","id","name","allInputData","Date","getTime","toString","alert","useEffect","setItem","stringify","className","style","color","fontSize","type","placeholder","value","onChange","e","target","title","onClick","newEditItem","find","editItem","index","updateditems","filter","deleteItem","data-sm-link-text","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qLAmIeA,EAlHF,WAKT,MAAkCC,mBAAS,IAA3C,mBAAOC,EAAP,KAAkBC,EAAlB,KACA,EAA0BF,mBAhBfG,aAAaC,QAAQ,SAIrBC,KAAKC,MAAMH,aAAaC,QAAQ,UAEhC,IAUX,mBAAOG,EAAP,KAAcC,EAAd,KACA,EAAwCR,oBAAS,GAAjD,mBAAOS,EAAP,KAAqBC,EAArB,KACA,EAAoCV,mBAAS,MAA7C,mBAAOW,EAAP,KAAmBC,EAAnB,KAEMC,EAAU,WACZ,GAAKZ,EAGA,GAAGA,IAAcQ,EAClBD,EACID,EAAMO,KAAI,SAACC,GACP,OAAIA,EAAKC,KAAOL,EACL,2BAAKI,GAAZ,IAAkBE,KAAKhB,IAEpBc,MAGfL,GAAgB,GAChBR,EAAa,IACbU,EAAc,UAEb,CACF,IAAMM,EAAe,CAAEF,IAAI,IAAIG,MAAOC,UAAUC,WAAYJ,KAAKhB,GAChEO,EAAS,GAAD,mBAAKD,GAAL,CAAYW,KACpBhB,EAAa,SAlBboB,MAAM,qBAwDd,OAJAC,qBAAU,WACPpB,aAAaqB,QAAQ,QAASnB,KAAKoB,UAAUlB,MAC7C,CAACA,IAGA,mCACI,qBAAKmB,UAAU,WAAf,SACI,sBAAKA,UAAU,YAAf,UACI,oBAAIC,MAAO,CAAEC,MAAM,QAASC,SAAS,QAArC,2BAEP,sBAAKH,UAAU,WAAf,UACW,uBAAOI,KAAK,OAAOC,YAAY,sBAC5BC,MAAO/B,EACPgC,SAAU,SAACC,GAAD,OAAOhC,EAAagC,EAAEC,OAAOH,UAExCvB,EAAe,mBAAGiB,UAAU,qBAAqBU,MAAM,WAAWC,QAASxB,IAC7E,mBAAGa,UAAU,sBAAsBU,MAAM,cAAcC,QAASxB,OAIpE,qBAAKa,UAAU,YAAf,SAGQnB,EAAMO,KAAI,SAACC,GACP,OAEI,cADA,CACA,OAAKW,UAAU,WAAf,UACI,6BAAMX,EAAKE,OACX,sBAAKS,UAAU,WAAf,UACA,mBAAGA,UAAU,sBAAsBU,MAAM,YAAYC,QAAS,kBA7CjF,SAACrB,GACf,IAAIsB,EAAc/B,EAAMgC,MAAK,SAACxB,GAC1B,OAAOA,EAAKC,KAAOA,KAG1BN,GAAgB,GAChBR,EAAaoC,EAAYrB,MACzBL,EAAcI,GAsC0FwB,CAASzB,EAAKC,OAClF,mBAAGU,UAAU,2BAA2BU,MAAM,cAAcC,QAAS,kBA1DtF,SAACI,GAEhB,IAAMC,EAAenC,EAAMoC,QAAO,SAAC5B,GAC/B,OAAO0B,IAAU1B,EAAKC,MAG1BR,EAASkC,GAoDkGE,CAAW7B,EAAKC,YAJhED,EAAKC,SAepD,qBAAKU,UAAU,YAAf,SACI,yBAAQA,UAAU,eAAemB,oBAAkB,aAAaR,QA/ClE,WACb7B,EAAS,KA8CM,UAAoF,gDAApF,iBChHTsC,EAPH,WACV,OACE,mCACE,cAAC,EAAD,OCHNC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,U","file":"static/js/main.a3826e8e.chunk.js","sourcesContent":["import React, {useState, useEffect} from 'react'\r\nimport \"../App.css\"\r\n\r\n\r\n// to get the data from LocalStorage\r\n\r\nconst getLocalItmes = () => {\r\n    let list = localStorage.getItem('lists');\r\n    // console.log(list);\r\n\r\n    if (list) {\r\n        return JSON.parse(localStorage.getItem('lists'));\r\n    } else {\r\n        return [];\r\n    }\r\n}\r\n\r\nconst ToDo = () => {\r\n\r\n    // this inputData state will be used to collect users input data, assigning '', as initial value will be empty.\r\n    // whatever data will be there(entered by user) in inputData state, \r\n    //w'll create one more state to store that data in form of array to add one by one on clicking add button\r\n    const [inputData, setInputData] = useState(''); \r\n    const [items, setItems] = useState(getLocalItmes()); // initially its like passing [] empty array, useState([]);\r\n    const [toggleSubmit, setToggleSubmit] = useState(true);\r\n    const [isEditItem, setIsEditItem] = useState(null);\r\n    \r\n    const addItem = () => { // onclicking addItem button, all data which were there in inputData, will be addaed in items state array\r\n        if (!inputData) { // if there will be no data, then do nothing\r\n            alert('please fill data');\r\n        }\r\n        else if(inputData && !toggleSubmit){\r\n            setItems(\r\n                items.map((elem) =>{\r\n                    if (elem.id === isEditItem) {\r\n                        return { ...elem, name:inputData}\r\n                    }\r\n                    return elem;\r\n                })\r\n            )\r\n            setToggleSubmit(true);\r\n            setInputData('');\r\n            setIsEditItem(null);\r\n        }\r\n        else { // if data will be entered, then only it will add items on clicking button\r\n           const allInputData = { id: new Date().getTime().toString(), name:inputData }\r\n            setItems([...items, allInputData]); // to add all previous data, we used ...items\r\n            setInputData('') // after adding items, this input field will be empty again\r\n        }\r\n    }\r\n\r\n    \r\n    // delete the items\r\n    const deleteItem = (index) => {\r\n        //console.log(id);\r\n        const updateditems = items.filter((elem) => {\r\n            return index !== elem.id; // inside filter method, whatever the index value is eg.(ind), w'll compare with id \r\n        });\r\n\r\n        setItems(updateditems); // whatever id is not matching, it will return that, expect that which mathces\r\n    }\r\n\r\n\r\n    // edit item\r\n\r\n    const editItem = (id) =>{\r\n       let newEditItem = items.find((elem) => {\r\n           return elem.id === id\r\n    });\r\n   // console.log(newEditItem);\r\n    setToggleSubmit(false);\r\n    setInputData(newEditItem.name);\r\n    setIsEditItem(id);\r\n}\r\n\r\n    // remove all \r\n    const removeAll = () => { // to remove all the items at once\r\n         setItems([]); // we're emptying the setItems\r\n    }\r\n\r\n    // add data to localStorage\r\n    useEffect(() => {\r\n       localStorage.setItem('lists', JSON.stringify(items))\r\n    }, [items]);\r\n\r\n    return (\r\n        <>\r\n            <div className=\"main-div\">\r\n                <div className=\"child-div\">\r\n                    <h1 style={{ color:\"white\", fontSize:\"45px\"}}> My ToDo List</h1>\r\n                       \r\n             <div className=\"addItems\">\r\n                        <input type=\"text\" placeholder=\"✍ Add Items...\"\r\n                           value={inputData} \r\n                           onChange={(e) => setInputData(e.target.value) } // to update the empty input value with the value typed by the user\r\n                        />\r\n                        { toggleSubmit ? <i className=\"fa fa-plus add-btn\" title=\"Add Item\" onClick={addItem}></i> :\r\n                        <i className=\"far fa-edit add-btn\" title=\"Update Item\" onClick={addItem}></i>\r\n                    }\r\n                        </div>\r\n\r\n                    <div className=\"showItems\">\r\n                        \r\n                        {\r\n                            items.map((elem) => { // to map through items array, value of items array will be stired in elem\r\n                                return (\r\n                                    // to get the unique id, ind is there, which we're passing in deleteItem function\r\n                                    <div className=\"eachItem\" key={elem.id}> \r\n                                        <h3>{ elem.name }</h3>\r\n                                        <div className=\"todo-btn\">\r\n                                        <i className=\"fas fa-edit add-btn\" title=\"Edit Item\" onClick={() => editItem(elem.id)}></i>\r\n                                        <i className=\"fas fa-trash-alt add-btn\" title=\"Delete Item\" onClick={() => deleteItem(elem.id)}></i>\r\n                                    </div>\r\n                                    </div>\r\n                                )\r\n                            })\r\n\r\n                        }\r\n                       \r\n                    </div>\r\n                \r\n                    {/* clear all button  */}\r\n                    <div className=\"showItems\">\r\n                        <button className=\"btn effect04\" data-sm-link-text=\"Remove All\" onClick={removeAll}><span> CHECK LIST </span> </button>\r\n                    </div>\r\n                </div>\r\n          </div>  \r\n        </>\r\n    )\r\n}\r\n\r\nexport default ToDo","import React from 'react';\nimport './App.css';\nimport ToDo from './components/ToDo';\n\nconst App = () => {\n  return (\n    <>\n      <ToDo/>\n    </>\n  );\n}\nexport default App;\n\n\n// editing item onclicking edit buttton will be done in following steps:\n\n// 1: get the id and name of the data which user clicked to edit\n// 2: set the toggle mode to change the submit button into edit button\n// 3: Now update the value of the setInput with the new updated value to edit.\n// 4: To pass the current element Id to new state variable for reference","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}